/**
 * The relevant part of the database schema
 * CREATE TYPE course_project_status AS ENUM ('failed', 'succeeded', 'reviewing');

CREATE TABLE "courses" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR(100) NOT NULL,
  "description" TEXT,
  "topics" INTEGER,
  "img_url" VARCHAR(100),
  "created_at" TIMESTAMP DEFAULT NOW()
);


CREATE TABLE "course_projects" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "course_id" INTEGER NOT NULL,
  "title" VARCHAR(100) NOT NULL,
  "description" TEXT,
  "notes" TEXT,
  FOREIGN KEY ("course_id") REFERENCES "courses" ("id") ON DELETE CASCADE
);

CREATE TABLE "user_course_projects" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" INTEGER NOT NULL,
  "course_id" INTEGER NOT NULL,
  "course_project_id" INTEGER NOT NULL,
  "repo_url" VARCHAR(200),  -- URL to user's submitted project repo
  "submission_notes" TEXT,  -- Any notes submitted by the user with their project
  "review_notes" TEXT,      -- Any notes added by the reviewer
  "status" course_project_status DEFAULT 'reviewing', -- Status specific to user project (e.g., in_progress, passed, failed)
  "submitted_at" TIMESTAMP,  -- Time when the project was submitted
  "graded_at" TIMESTAMP,     -- Time when the project was graded
  "created_at" TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE,
  FOREIGN KEY ("course_id") REFERENCES "courses" ("id") ON DELETE CASCADE,
  FOREIGN KEY ("course_project_id") REFERENCES "course_projects" ("id") ON DELETE CASCADE,
  UNIQUE ("user_id", "course_project_id")
);

CREATE TABLE "topics" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "course_id" INTEGER NOT NULL,
  "name" VARCHAR(100) NOT NULL,
  "description" TEXT,
  "order" INTEGER NOT NULL,
  "total_markers" INTEGER NOT NULL,
  "created_at" TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY ("course_id") REFERENCES "courses" ("id") ON DELETE CASCADE
);


CREATE TABLE "user_topic_completions" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" INTEGER NOT NULL,
  "course_id" INTEGER NOT NULL,
  "topic_id" INTEGER NOT NULL,
  "completed" BOOLEAN DEFAULT FALSE,
  "progress_markers" INTEGER DEFAULT 0, -- Both common mistakes and milestones are treated as progress markers
  "created_at" TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE,
  FOREIGN KEY ("course_id") REFERENCES "courses" ("id") ON DELETE CASCADE,
  FOREIGN KEY ("topic_id") REFERENCES "topics" ("id") ON DELETE CASCADE
);

 * 
 * 
 * 
 */

const pool = require("../config/db");

// So the first function we need is to check if the user has passed all the topics in the course
// then he will be able to access the project
// so that Api will return the data of the course project
const get_course_project = async (course_id, user_id) => {
    try {
        // Check if the user has completed all topics in the course
        const user_completed_topics_result = await pool.query(
            `
            SELECT
                COUNT(*) AS total_topics
            FROM user_topic_completions
            WHERE user_id = $1
                AND course_id = $2
                AND completed = true
            `, 
            [user_id, course_id]
        );

        // Get the total number of topics for the course
        const total_topics_result = await pool.query(
            `
            SELECT topics
            FROM courses
            WHERE id = $1
            `, 
            [course_id]
        );

        // Parse the counts from the results
        const user_completed_topics_count = parseInt(user_completed_topics_result.rows[0].total_topics, 10);
        const total_topics_count = parseInt(total_topics_result.rows[0].topics, 10);

        // Check if user has completed all topics
        if (user_completed_topics_count < total_topics_count) {
            throw new Error("User has not completed all topics in the course.");
        }

        // If user has completed all topics, get the course project details
        const course_project_result = await pool.query(
            `
            SELECT
                cp.id AS course_project_id,
                cp.title AS course_project_title,
                cp.description AS course_project_description,
                cp.notes AS course_project_notes
            FROM course_projects cp
            WHERE cp.course_id = $1
            `, 
            [course_id]
        );

        // Return null if no project is found for the course
        if (course_project_result.rowCount === 0) {
            return null;
        }

        const course_project = course_project_result.rows[0];

        // Check if the user has already submitted a project for this course
        const user_submission_result = await pool.query(
            `
            SELECT id
            FROM user_course_projects
            WHERE user_id = $1 AND course_project_id = $2
            `,
            [user_id, course_project.course_project_id]
        );

        // Determine if a submission exists for the user
        const has_submitted = user_submission_result.rowCount > 0;

        // Return project details along with `submitted` attribute
        return {
            ...course_project,
            submitted: has_submitted
        };
    } catch (err) {
        throw err;
    }
};

// The second function will be able to submit his project
// Also the function will have to make sure before that that the user has not submitted it before
const submit_course_project = async (user_id, course_id, course_project_id, repo_url, submission_notes) => {
    try {
        // Check if the user has already submitted the project
        const existing_submission = await pool.query(
            `
            SELECT id
            FROM user_course_projects
            WHERE user_id = $1 AND course_project_id = $2
            `,
            [user_id, course_project_id]
        );

        if (existing_submission.rowCount > 0) {
            throw new Error("Project already submitted by the user.");
        }

        // Insert new submission into user_course_projects
        await pool.query(
            `
            INSERT INTO user_course_projects 
                (user_id, course_id, course_project_id, repo_url, submission_notes, status, submitted_at)
            VALUES ($1, $2, $3, $4, $5, 'reviewing', NOW())
            `,
            [user_id, course_id, course_project_id, repo_url, submission_notes]
        );

        return { message: "Project submitted successfully!" };
    } catch (err) {
        throw err;
    }
};


// The third function will be to get the result and if passed or not
// So it will make sure that he has submitted it before
const get_course_project_review = async (user_id, course_project_id) => {
    try {

        // Check if the user has submitted this project before looking for a review
        const submission_result = await pool.query(
            `
            SELECT id
            FROM user_course_projects
            WHERE user_id = $1 AND course_project_id = $2
            `,
            [user_id, course_project_id]
        );

        // If no submission found, throw an error indicating that the project hasn't been submitted
        if (submission_result.rowCount === 0) {
            throw new Error("No project submission found for the given user and project. Please submit the project first.");
        }

        // If a submission exists, fetch the review details
        const review_result = await pool.query(
            `
            SELECT
                status,
                review_notes,
                graded_at
            FROM user_course_projects
            WHERE user_id = $1 AND course_project_id = $2
            `,
            [user_id, course_project_id]
        );

        // If no review found, it means the project is under review or hasn't been graded yet
        if (review_result.rowCount === 0) {
            throw new Error("No review found for the submitted project. It might still be under review.");
        }

        return review_result.rows[0];
    } catch (err) {
        // Handle the specific cases or re-throw the error
        throw err;
    }
};



module.exports = {
    get_course_project,
    submit_course_project,
    get_course_project_review
}