/**
 * The related database tables
 * 
 * CREATE TABLE "assignments" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "topic_id" INTEGER UNIQUE NOT NULL,
  "title" VARCHAR(100) NOT NULL,
  "description" TEXT,
  "created_at" TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY ("topic_id") REFERENCES "topics" ("id") ON DELETE CASCADE
);

CREATE TABLE "user_assignment_completions" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" INTEGER NOT NULL,
  "assignment_id" INTEGER NOT NULL,
  "completed" BOOLEAN DEFAULT FALSE,
  "completed_at" TIMESTAMP,
  FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE,
  FOREIGN KEY ("assignment_id") REFERENCES "assignments" ("id") ON DELETE CASCADE,
  UNIQUE ("user_id", "assignment_id")
);
 */

const pool = require("../config/db");

// so functions will mostly be to get an assignment by or without an id but 
// with the topic id cause each topic has only one assignment
const get_assignment_by_topic_id = async (topic_id) => {
    try {
        const result = await pool.query(`
            SELECT
                a.id as assignment_id,
                a.title as assignment_title,
                a.description as assignment_description
            FROM assignments a
            WHERE a.topic_id = $1
        `, [topic_id]);

        if (result.rows.length === 0) {
            throw new Error("Assignment not found.");
        }

        return result.rows[0];
    } catch (err) {
        throw err;
    }
}

// The second function will be to mark the assignment as completed
// by creating a new entry in the user_assignment_completions table
const mark_assignment_as_completed = async (user_id, assignment_id) => {
    try {
        // First, check if the assignment has already been marked as completed
        const checkResult = await pool.query(`
            SELECT 1 FROM user_assignment_completions
            WHERE user_id = $1 AND assignment_id = $2
        `, [user_id, assignment_id]);

        // If it has not been marked as completed, insert the new completion record
        if (checkResult.rows.length === 0) {
            const insertResult = await pool.query(`
                INSERT INTO user_assignment_completions (user_id, assignment_id, completed, completed_at)
                VALUES ($1, $2, TRUE, NOW())
                RETURNING *
            `, [user_id, assignment_id]);

            return insertResult.rows[0];
        } else {
            // If it has already been marked as completed, you might want to return an appropriate response
            throw new Error('Assignment already marked as completed.');
        }
    } catch (err) {
        throw err;
    }
}


module.exports = {
    get_assignment_by_topic_id,
    mark_assignment_as_completed
}