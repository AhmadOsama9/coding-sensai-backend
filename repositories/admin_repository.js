const pool = require("../config/db");
const validator = require("validator");

const sanitizeInput = (input) => {
    return validator.escape(input); 
};



const find_admin_by_username = async (username) => {
    try {
        const Username = sanitizeInput(username);

        const result = await pool.query("SELECT id, password FROM admins WHERE username = $1", [Username]);
        return result.rows[0];
    } catch (err) {
        throw err;
    }
}

/*
CREATE TABLE "user_course_projects" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" INTEGER NOT NULL,
  "course_id" INTEGER NOT NULL,
  "course_project_id" INTEGER NOT NULL,
  "repo_url" VARCHAR(200),  -- URL to user's submitted project repo
  "submission_notes" TEXT,  -- Any notes submitted by the user with their project
  "review_notes" TEXT,      -- Any notes added by the reviewer
  "status" course_project_status DEFAULT 'reviewing', -- Status specific to user project (e.g., in_progress, passed, failed)
  "submitted_at" TIMESTAMP,  -- Time when the project was submitted
  "graded_at" TIMESTAMP,     -- Time when the project was graded
  "created_at" TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY ("user_id") REFERENCES "users" ("id") ON DELETE CASCADE,
  FOREIGN KEY ("course_id") REFERENCES "courses" ("id") ON DELETE CASCADE,
  FOREIGN KEY ("course_project_id") REFERENCES "course_projects" ("id") ON DELETE CASCADE,
  UNIQUE ("user_id", "course_project_id")
);

CREATE TABLE "courses" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR(100) NOT NULL,
  "description" TEXT,
  "topics" INTEGER,
  "img_url" VARCHAR(100),
  "created_at" TIMESTAMP DEFAULT NOW()
);
*/

// So this here should return all the projects
const fetch_all_users_projects = async (status = null) => {
    try {
        let query = `
            SELECT
                ucp.id,
                ucp.user_id,
                ucp.course_id,
                ucp.course_project_id,
                ucp.repo_url,
                ucp.submission_notes,
                ucp.review_notes,
                ucp.status,
                ucp.submitted_at,
                ucp.graded_at,
                ucp.created_at,
                u.username,
                c.name AS course_name,
                cp.title AS project_name
            FROM user_course_projects ucp
            JOIN users u ON ucp.user_id = u.id
            JOIN courses c ON ucp.course_id = c.id
            JOIN course_projects cp ON ucp.course_project_id = cp.id
        `;

        const params = [];
        if (status) {
            query += ` WHERE ucp.status = $1`;
            params.push(status);
        }

        const result = await pool.query(query, params);
        return result.rows;
    } catch (err) {
        throw err;
    }
}

const mark_project_as_reviewed = async (project_id, status, review_notes) => {
    try {
        const query = `
            UPDATE user_course_projects
            SET status = $1, review_notes = $2, graded_at = NOW()
            WHERE id = $3
        `;

        const result = await pool.query(query, [status, review_notes, project_id]);

        if (result.rowCount === 0) {
            throw new Error("Failed to update project status.");
        }

        return result.rowCount;

    } catch (err) {
        throw err;
    }
}




module.exports = {
    find_admin_by_username,
    fetch_all_users_projects,
    mark_project_as_reviewed
};